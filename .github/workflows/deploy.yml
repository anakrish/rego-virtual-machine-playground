name: Build and Deploy RVM Playground

on:
  # Trigger on pushes to main branch
  push:
    branches: [ main ]
  
  # Trigger on pull requests to main branch
  pull_request:
    branches: [ main ]
  
  # Manual trigger
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: false
        default: 'production'
        type: choice
        options:
          - production
          - staging
      skip_tests:
        description: 'Skip tests during deployment'
        required: false
        default: false
        type: boolean
      force_rebuild:
        description: 'Force rebuild WASM module'
        required: false
        default: false
        type: boolean
  
  # Weekly scheduled build (Sundays at 2 AM UTC)
  schedule:
    - cron: '0 2 * * 0'

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  # Environment variables
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    outputs:
      deployment-url: ${{ steps.deployment.outputs.page_url }}
      wasm-hash: ${{ steps.wasm-build.outputs.hash }}
    
    steps:
      - name: Checkout Regorus RVM Playground source
        uses: actions/checkout@v4
        with:
          repository: anakrish/regorus
          ref: rvm-playground
          fetch-depth: 0  # Full history for better caching
          path: regorus-source
      
      - name: Display source information
        run: |
          cd regorus-source
          echo "üîç Building from anakrish/regorus@rvm-playground"
          echo "üìÖ Latest commit: $(git log -1 --format='%H (%s) - %an, %ar')"
          echo "üìÇ RVM Playground files:"
          ls -la rvm-playground/ | head -10
      
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown
          components: rustfmt, clippy
      
      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      
      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            regorus-source/target/
            regorus-source/bindings/wasm/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('regorus-source/**/Cargo.lock', 'regorus-source/**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Lint Rust code (optional)
        run: |
          cd regorus-source/bindings/wasm
          cargo fmt -- --check || echo "::warning::Code formatting issues found"
          cargo clippy -- -D warnings || echo "::warning::Clippy warnings found"
        continue-on-error: true
      
      - name: Run tests (if not skipped)
        if: ${{ !inputs.skip_tests }}
        run: |
          cd regorus-source/bindings/wasm
          cargo test --target x86_64-unknown-linux-gnu
        continue-on-error: true
      
      - name: Build WASM module
        id: wasm-build
        run: |
          cd regorus-source/bindings/wasm
          
          # Force rebuild if requested
          if [[ "${{ inputs.force_rebuild }}" == "true" ]]; then
            cargo clean
          fi
          
          # Build with optimizations
          wasm-pack build \
            --target web \
            --out-dir ../../rvm-playground/wasm \
            --scope regorus
          
          # Verify WASM module was built
          echo "=== WASM Build Results ==="
          ls -la ../../rvm-playground/wasm/ || echo "WASM directory not found"
          
          # Check for required WASM files
          if [[ -f "../../rvm-playground/wasm/regorusjs.js" ]]; then
            echo "‚úì regorusjs.js found ($(wc -c < ../../rvm-playground/wasm/regorusjs.js) bytes)"
          else
            echo "‚úó regorusjs.js missing"
          fi
          
          if [[ -f "../../rvm-playground/wasm/regorusjs_bg.wasm" ]]; then
            echo "‚úì regorusjs_bg.wasm found ($(wc -c < ../../rvm-playground/wasm/regorusjs_bg.wasm) bytes)"
          else
            echo "‚úó regorusjs_bg.wasm missing"
          fi
          
          # Generate hash for caching
          if find ../../rvm-playground/wasm -name "*.wasm" -exec test -f {} \; 2>/dev/null; then
            WASM_HASH=$(find ../../rvm-playground/wasm -name "*.wasm" -exec sha256sum {} \; | sha256sum | cut -d' ' -f1)
            echo "hash=$WASM_HASH" >> $GITHUB_OUTPUT
            echo "WASM hash: $WASM_HASH"
          else
            echo "No WASM files found for hashing"
            echo "hash=none" >> $GITHUB_OUTPUT
          fi
      
      - name: Optimize WASM (optional)
        run: |
          # Install wasm-opt if available
          if command -v wasm-opt &> /dev/null; then
            find regorus-source/rvm-playground/wasm -name "*.wasm" -exec wasm-opt -Oz {} -o {} \;
            echo "WASM optimized with wasm-opt"
          else
            echo "wasm-opt not available, skipping optimization"
          fi
        continue-on-error: true
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      - name: Prepare deployment directory
        run: |
          mkdir -p deploy
          
          # Copy playground files from regorus source
          cd regorus-source/rvm-playground
          cp -r *.html *.css *.js ../../deploy/ 2>/dev/null || true
          cp -r wasm ../../deploy/ 2>/dev/null || true
          
          # Ensure all required files are copied (excluding README.md to avoid conflicts)
          for file in index.html style.css app.js; do
            if [[ -f "$file" ]]; then
              cp "$file" ../../deploy/
              echo "Copied $file to deployment directory"
            else
              echo "Warning: $file not found in source"
            fi
          done
          
          cd ../../
          
          # Create .nojekyll to bypass Jekyll processing
          touch deploy/.nojekyll
          
          # Ensure we have an index.html in the root
          if [ ! -f deploy/index.html ]; then
            echo "Warning: No index.html found in deployment directory"
            # Create a simple index.html if missing
            cat > deploy/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>RVM Playground</title>
              <meta charset="utf-8">
              <meta name="viewport" content="width=device-width, initial-scale=1">
          </head>
          <body>
              <h1>RVM Playground</h1>
              <p>Loading playground...</p>
              <script>
                  // Redirect to main playground file if it exists
                  if (window.location.pathname.endsWith('/')) {
                      const possibleFiles = ['playground.html', 'main.html', 'app.html'];
                      for (const file of possibleFiles) {
                          fetch(file).then(response => {
                              if (response.ok) {
                                  window.location.href = file;
                              }
                          }).catch(() => {});
                      }
                  }
              </script>
          </body>
          </html>
          EOF
          fi
          
          # Update app.js for production (enable real WASM)
          if [[ -f "deploy/app.js" ]]; then
            echo "Original app.js size: $(wc -c < deploy/app.js) bytes"
            
            # Make a backup for debugging
            cp deploy/app.js deploy/app.js.backup
            
            # Enable WASM import (be more specific with the patterns to avoid breaking code)
            sed -i 's|// import init,|import init,|g' deploy/app.js
            sed -i 's|// await init();|await init();|g' deploy/app.js
            sed -i 's|// const wasmModule =|const wasmModule =|g' deploy/app.js
            
            echo "Updated app.js for production"
            echo "Updated app.js size: $(wc -c < deploy/app.js) bytes"
            
            # Show first few lines of changes for debugging
            echo "First 20 lines of updated app.js:"
            head -20 deploy/app.js || true
          else
            echo "Warning: app.js not found for production updates"
          fi
          
          # Check for Monaco Editor references
          if [[ -f "deploy/index.html" ]]; then
            if grep -q "monaco-editor" deploy/index.html; then
              echo "‚úì Monaco Editor found in index.html"
            else
              echo "‚ö† Monaco Editor not found in index.html"
            fi
            
            if grep -q "app.js" deploy/index.html; then
              echo "‚úì app.js reference found in index.html"
            else
              echo "‚ö† app.js reference not found in index.html"
            fi
          fi
          
          # Add deployment timestamp and source info
          echo "<!-- Deployed: $(date -u) from anakrish/regorus@rvm-playground -->" >> deploy/index.html
          
          # Debug output
          echo "=== Deployment files prepared ==="
          echo "HTML files:"
          find deploy -name "*.html" | sort
          echo "CSS files:"
          find deploy -name "*.css" | sort
          echo "JS files:"
          find deploy -name "*.js" | head -5
          echo "WASM files:"
          find deploy -name "*.wasm" -o -name "regorusjs*" | sort
          echo "Other important files:"
          find deploy -name ".nojekyll" -o -name "README.md"
          echo "=== Total files: $(find deploy -type f | wc -l) ==="
      
      - name: Validate deployment
        run: |
          # Check that required files exist
          required_files=("deploy/index.html")
          for file in "${required_files[@]}"; do
            if [[ ! -f "$file" ]]; then
              echo "::error::Required file missing: $file"
              # List what files we do have
              echo "Available files in deploy/:"
              ls -la deploy/ || true
              exit 1
            else
              echo "‚úì Found $file"
            fi
          done
          
          # Check for CSS and JS files (at least one of each should exist)
          if ! find deploy -name "*.css" | grep -q .; then
            echo "::warning::No CSS files found"
          else
            echo "‚úì Found CSS files: $(find deploy -name "*.css" | wc -l)"
          fi
          
          if ! find deploy -name "*.js" | grep -q .; then
            echo "::warning::No JS files found" 
          else
            echo "‚úì Found JS files: $(find deploy -name "*.js" | wc -l)"
          fi
          
          # Check WASM files
          if [[ ! -d "deploy/wasm" ]]; then
            echo "::warning::WASM directory missing"
          elif [[ ! -f "deploy/wasm/regorusjs.js" ]]; then
            echo "::warning::regorusjs.js missing from WASM directory"
            echo "WASM directory contents:"
            ls -la deploy/wasm/ || true
          else
            echo "‚úì Found WASM module files"
          fi
          
          echo "Deployment validation completed"
      
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v4
        with:
          path: ./deploy
      
      - name: Upload build artifacts (for debugging)
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: build-debug-${{ github.run_number }}
          path: |
            regorus-source/bindings/wasm/target/
            regorus-source/rvm-playground/wasm/
            deploy/
            regorus-source/
          retention-days: 7

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      
      - name: Output deployment info
        run: |
          echo "üöÄ RVM Playground deployed successfully!"
          echo "üìç URL: ${{ steps.deployment.outputs.page_url }}"
          echo "üìù Source commit: Latest from rvm-playground branch"

  # Notification job (runs after deployment)
  notify:
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: always() && (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')
    
    steps:
      - name: Checkout source for commit info
        uses: actions/checkout@v4
        with:
          repository: anakrish/regorus
          ref: rvm-playground
          fetch-depth: 1
          path: regorus-source
      
      - name: Notify deployment status
        run: |
          cd regorus-source
          SOURCE_COMMIT=$(git log -1 --format='%H')
          SOURCE_MESSAGE=$(git log -1 --format='%s')
          SOURCE_AUTHOR=$(git log -1 --format='%an')
          SOURCE_DATE=$(git log -1 --format='%ar')
          
          if [[ "${{ needs.build-and-deploy.result }}" == "success" ]]; then
            echo "üöÄ RVM Playground deployed successfully!"
            echo "üìç URL: ${{ needs.build-and-deploy.outputs.deployment-url }}"
            echo "üîß WASM Hash: ${{ needs.build-and-deploy.outputs.wasm-hash }}"
            echo "üìÖ Trigger: ${{ github.event_name }}"
            echo "üì¶ Source: anakrish/regorus@rvm-playground"
            echo "üîó Commit: $SOURCE_COMMIT"
            echo "üí¨ Message: $SOURCE_MESSAGE"
            echo "üë§ Author: $SOURCE_AUTHOR ($SOURCE_DATE)"
          else
            echo "‚ùå Deployment failed"
            echo "üìÖ Trigger: ${{ github.event_name }}"
            echo "üì¶ Source: anakrish/regorus@rvm-playground"
            echo "üîó Commit: $SOURCE_COMMIT"
            echo "üîç Check logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          fi
      
      # Optional: Send notification to external services
      # - name: Send Slack notification
      #   if: needs.deploy.result == 'failure'
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: failure
      #     text: "RVM Playground deployment failed"
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Cleanup job (runs weekly to clean up old artifacts)
  cleanup:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
      - name: Cleanup old artifacts
        run: |
          echo "üßπ Scheduled cleanup triggered"
          # GitHub automatically handles artifact retention
          # This job can be extended for custom cleanup tasks
          echo "Cleanup completed"